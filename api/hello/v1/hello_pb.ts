// @generated by protoc-gen-es v1.3.2 with parameter "target=ts,import_extension=none"
// @generated from file hello/v1/hello.proto (package hello.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message hello.v1.Hello
 */
export class Hello extends Message<Hello> {
  /**
   * @generated from field: repeated string messages = 1;
   */
  messages: string[] = [];

  constructor(data?: PartialMessage<Hello>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hello.v1.Hello";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "messages", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Hello {
    return new Hello().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Hello {
    return new Hello().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Hello {
    return new Hello().fromJsonString(jsonString, options);
  }

  static equals(a: Hello | PlainMessage<Hello> | undefined, b: Hello | PlainMessage<Hello> | undefined): boolean {
    return proto3.util.equals(Hello, a, b);
  }
}

/**
 * @generated from message hello.v1.MessagesRequest
 */
export class MessagesRequest extends Message<MessagesRequest> {
  constructor(data?: PartialMessage<MessagesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hello.v1.MessagesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesRequest {
    return new MessagesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesRequest {
    return new MessagesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesRequest {
    return new MessagesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesRequest | PlainMessage<MessagesRequest> | undefined, b: MessagesRequest | PlainMessage<MessagesRequest> | undefined): boolean {
    return proto3.util.equals(MessagesRequest, a, b);
  }
}

/**
 * @generated from message hello.v1.MessagesResponse
 */
export class MessagesResponse extends Message<MessagesResponse> {
  /**
   * @generated from field: repeated string messages = 1;
   */
  messages: string[] = [];

  constructor(data?: PartialMessage<MessagesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hello.v1.MessagesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "messages", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessagesResponse {
    return new MessagesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessagesResponse {
    return new MessagesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessagesResponse {
    return new MessagesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MessagesResponse | PlainMessage<MessagesResponse> | undefined, b: MessagesResponse | PlainMessage<MessagesResponse> | undefined): boolean {
    return proto3.util.equals(MessagesResponse, a, b);
  }
}

/**
 * @generated from message hello.v1.SendRequest
 */
export class SendRequest extends Message<SendRequest> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<SendRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hello.v1.SendRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendRequest {
    return new SendRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendRequest {
    return new SendRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendRequest {
    return new SendRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendRequest | PlainMessage<SendRequest> | undefined, b: SendRequest | PlainMessage<SendRequest> | undefined): boolean {
    return proto3.util.equals(SendRequest, a, b);
  }
}

/**
 * @generated from message hello.v1.SendResponse
 */
export class SendResponse extends Message<SendResponse> {
  constructor(data?: PartialMessage<SendResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hello.v1.SendResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendResponse {
    return new SendResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendResponse {
    return new SendResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendResponse {
    return new SendResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SendResponse | PlainMessage<SendResponse> | undefined, b: SendResponse | PlainMessage<SendResponse> | undefined): boolean {
    return proto3.util.equals(SendResponse, a, b);
  }
}

