syntax = "proto3";

package cheaoss.v1;

import "rbt/v1alpha1/options.proto";

message Cheaoss {
    option (rbt.v1alpha1.state) = {};
    Team nextTeamAssignment = 1;
    repeated string pieceIds = 2;
}

enum Team {
    TEAM_UNKNOWN = 0;
    WHITE = 1;
    BLACK = 2;
} 

message Location {
    uint32 row = 1;
    uint32 col = 2;
}

enum PieceType {
    PIECES_TYPE_UNKNOWN = 0;
    PAWN = 1;
    BISHOP = 2;
    KNIGHT = 3;
    ROOK = 4;
    QUEEN = 5;
    KING = 6;
}

message Piece {
    option (rbt.v1alpha1.state) = {};
    Team team = 1;
    PieceType type = 2;
    Location loc = 3;
}

service CheaossMethods {
    rpc AssignTeam(AssignTeamRequest) returns (AssignTeamResponse) {
        option (rbt.v1alpha1.method).writer = {};
    }

    rpc InitGame(InitGameRequest) returns (EmptyResponse) {
        option (rbt.v1alpha1.method).transaction = {};
    }

    rpc Board(EmptyRequest) returns (Cheaoss) {
        option (rbt.v1alpha1.method).reader = {};
    }

    rpc BoardPieces(EmptyRequest) returns (BoardPiecesResponse) {
        option (rbt.v1alpha1.method).reader = {};
    }
}

message EmptyRequest {}
message EmptyResponse {}

message AssignTeamRequest {}

message AssignTeamResponse {
    Team team = 1; 
}

message InitGameRequest {}

message BoardPiecesResponse {
    map<string, PieceMessage> pieces = 1;
}

service PieceMethods {
    rpc MakePiece(PieceMessage) returns (EmptyResponse) {
        option (rbt.v1alpha1.method).writer = {};
    }

    rpc Piece(EmptyRequest) returns (PieceMessage) {
        option (rbt.v1alpha1.method).reader = {};
    }

    rpc MovePiece(Location) returns (EmptyResponse) {
        option (rbt.v1alpha1.method).writer = {};
    }

    // Not currently possible to actually
    // rpc RemovePiece() returns (EmptyResponse) {
    //    option (rbt.v1alpha1.method).writer = {};
    //}
}

message PieceMessage {
    Team team = 1;
    PieceType type = 2;
    Location loc = 3;
}