syntax = "proto3";

package cheaoss.v1;

import "rbt/v1alpha1/options.proto";

message Cheaoss {
    option (rbt.v1alpha1.state) = {};
    Team next_team_assignment = 1;
    Team next_team_to_move = 2;
    repeated string piece_ids = 3;
    map<string, Team> players = 4;
    repeated MoveRequest white_moves_queue = 5;
    repeated MoveRequest black_moves_queue = 6;
}

enum Team {
    TEAM_UNKNOWN = 0;
    WHITE = 1;
    BLACK = 2;
} 

message Location {
    uint32 row = 1;
    uint32 col = 2;
}

enum PieceType {
    PIECES_TYPE_UNKNOWN = 0;
    PAWN = 1;
    BISHOP = 2;
    KNIGHT = 3;
    ROOK = 4;
    QUEEN = 5;
    KING = 6;
}

message Piece {
    option (rbt.v1alpha1.state) = {};
    Team team = 1;
    PieceType type = 2;
    Location loc = 3;
}

service CheaossMethods {
    rpc AssignTeam(AssignTeamRequest) returns (AssignTeamResponse) {
        option (rbt.v1alpha1.method).writer = {};
    }

    rpc InitGame(InitGameRequest) returns (EmptyResponse) {
        option (rbt.v1alpha1.method).transaction = {};
    }

    rpc Board(EmptyRequest) returns (Cheaoss) {
        option (rbt.v1alpha1.method).reader = {};
    }

    rpc BoardPieces(EmptyRequest) returns (BoardPiecesResponse) {
        option (rbt.v1alpha1.method).reader = {};
    }

    rpc MovePiece(MoveRequest) returns (EmptyResponse) {
        option (rbt.v1alpha1.method) = {
            transaction: {},
            errors: [ "InvalidMoveError" ],
        };
    }

    rpc QueueMove(MoveRequest) returns (EmptyResponse) {
        option (rbt.v1alpha1.method) = {
            writer: {},
            errors: [ "InvalidMoveError" ],
        };
    }
}

message EmptyRequest {}
message EmptyResponse {}

message AssignTeamRequest {
    string player_id = 1;
}

message AssignTeamResponse {
    Team team = 1; 
}

message InitGameRequest {}

message BoardPiecesResponse {
    map<string, cheaoss.v1.Piece> pieces = 1;
}

message MoveRequest {
    string player_id = 1;
    string piece_id = 2;
    Location start = 3;
    Location end = 4;
}

message InvalidMoveError {
    string message = 1;
}

service PieceMethods {
    rpc MakePiece(cheaoss.v1.Piece) returns (EmptyResponse) {
        option (rbt.v1alpha1.method).writer = {};
    }

    rpc Piece(EmptyRequest) returns (cheaoss.v1.Piece) {
        option (rbt.v1alpha1.method).reader = {};
    }

    rpc MovePiece(Location) returns (EmptyResponse) {
        option (rbt.v1alpha1.method) = {
            writer: {},
            errors: [ "InvalidMoveError" ],
        };
    }

    // Not currently possible to actually
    // rpc RemovePiece() returns (EmptyResponse) {
    //    option (rbt.v1alpha1.method).writer = {};
    //}
}